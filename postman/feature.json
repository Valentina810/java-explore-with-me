{
	"info": {
		"_postman_id": "e55a1fea-2b43-4749-89f2-8cd68ba1a0a3",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14064277"
	},
	"item": [
		{
			"name": "Создать пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"testUser1Id\", pm.response.json().id);",
							"",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('name');",
							"pm.expect(target).to.have.property('email');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать категорию 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"testCategory1Id\", pm.response.json().id);",
							"",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Категория должна содержать поля: id, name\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('name');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{$randomCompanyName}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать событие 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"testEvent1Id\", pm.response.json().id);",
							"",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('title');",
							"pm.expect(target).to.have.property('annotation');",
							"pm.expect(target).to.have.property('category');",
							"pm.expect(target).to.have.property('paid');",
							"pm.expect(target).to.have.property('eventDate');",
							"pm.expect(target).to.have.property('initiator');",
							"pm.expect(target).to.have.property('description');",
							"pm.expect(target).to.have.property('participantLimit');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('createdOn');",
							"pm.expect(target).to.have.property('location');",
							"pm.expect(target).to.have.property('requestModeration');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"annotation\": \"Quibusdam in quos nemo ut. Ducimus voluptate deleniti aliquam aperiam suscipit. Dolore earum alias omnis et cupiditate necessitatibus enim dolore. Amet pariatur quae nihil repellendus magni.\",\n    \"category\": {{testCategory1Id}},\n    \"description\": \"Hic velit porro ipsa. Quia quisquam distinctio voluptas neque. Voluptatibus ex ea.\\n \\rCumque quas et in exercitationem neque illum. Rem error ut. Adipisci qui vitae doloribus. Quia repellat assumenda. Non facilis ratione. Veniam doloremque earum ea repudiandae enim aliquid recusandae quod.\\n \\rAut aliquam in suscipit. Saepe facere fugit cupiditate ut vero aliquam maiores possimus in. Optio velit vel. Facilis necessitatibus ex minus et labore sunt vel eos amet. Placeat at aut aut necessitatibus qui doloribus. Necessitatibus consectetur optio non.\",\n    \"eventDate\": \"2025-04-07 02:59:52\",\n    \"location\": {\n        \"lat\": 57.7979,\n        \"lon\": 100.1282\n    },\n    \"paid\": \"false\",\n    \"participantLimit\": \"534\",\n    \"requestModeration\": \"false\",\n    \"title\": \"Reiciendis sint qui inventore ea ipsa.\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser1Id}}/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser1Id}}",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать комментарий пользователя 1 к событию 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"testComment1Id\", pm.response.json().id);",
							"",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, user, event, text, state,created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('user');",
							"pm.expect(target).to.have.property('event');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"Проверка корректности значения полей\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.user, ' поле\"user\" ').to.eql(pm.globals.get(\"testUser1Id\"));",
							"    pm.expect(jsonData.event, ' поле \"event\"').to.eql(pm.globals.get(\"testEvent1Id\"));",
							"    pm.expect(jsonData.state, ' поле \"state\"').to.eql('MODERATION');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Мы играли во все игры, и было весело и шумно. И под конец Аленка вдруг сказала: – А теперь в прятки! Давайте в прятки! И мы стали играть в прятки. Это было прекрасно, потому что мы с Мишкой все время подстраивали так, чтобы водить выпадало маленьким: Костику или Аленке, – а сами все время прятались и вообще водили малышей за нос.\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser1Id}}/comment/events/{{testEvent1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser1Id}}",
						"comment",
						"events",
						"{{testEvent1Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать комментарий 2 более 6000 символов пользователя 1 к событию 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"testComment2Id\", pm.response.json().id);",
							"",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, user, event, text, state,created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('user');",
							"pm.expect(target).to.have.property('event');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"Проверка корректности значения полей\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.user, ' поле\"user\" ').to.eql(pm.globals.get(\"testUser1Id\"));",
							"    pm.expect(jsonData.event, ' поле \"event\"').to.eql(pm.globals.get(\"testEvent1Id\"));",
							"    pm.expect(jsonData.state, ' поле \"state\"').to.eql('MODERATION');",
							"    pm.expect(jsonData.text.length, ' длина поля \"comments\" 5000 символов').to.eql(5000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Двадцать лет под кроватью - Драгунский В.Ю. И когда Мишка позвонил по телефону и позвал меня к себе, я тотчас же оделся и помчался к нему Двадцать лет под кроватью - Драгунский В.Ю. Там было светло и тепло и собралось много народу, пришла Аленка, за нею Костик и Андрюшка. Мы играли во все игры, и было весело и шумно. И под конец Аленка вдруг сказала: – А теперь в прятки! Давайте в прятки! И мы стали играть в прятки. Это было прекрасно, потому что мы с Мишкой все время подстраивали так, чтобы водить выпадало маленьким: Костику или Аленке, – а сами все время прятались и вообще водили малышей за нос. Но все наши игры проходили только в Мишкиной комнате, и это довольно скоро нам стало надоедать, потому что комната была маленькая, тесная и мы все время прятались за портьеру, или за шкаф, или за сундук, и в конце концов мы стали потихоньку выплескиваться из Мишкиной комнаты и заполнили своей игрой большущий длинный коридор квартиры. В коридоре было интереснее играть, потому что возле каждой двери стояли вешалки, а на них висели пальто и шубы. Это было гораздо лучше для нас, потому что, например, кто водит и ищет нас, тот, уж конечно, не сразу догадается, что я притаился за Марьсемениной шубой и сам влез в валенки как раз под шубой. игра в прятки И вот, когда водить выпало Костику, он отвернулся к стене и стал громко выкрикивать: – Раз! Два! Три! Четыре! Пять! Я иду искать! Тут все брызнули в разные стороны, кто куда, чтобы прятаться. А Костик немножко подождал и крикнул снова: – Раз! Два! Три! Четыре! Пять! Я иду искать! Опять!Это считалось как бы вторым звонком. Мишка сейчас же залез на подоконник, Аленка – за шкаф, а мы с Андрюшкой выскользнули в коридор. Тут Андрюшка, не долго думая, полез под шубу Марьи Семеновны, где я все время прятался, и оказалось, что я остался без места! И я хотел дать Андрюшке подзатыльник, чтобы он освободил мое место, но тут Костик крикнул третье предупреждение: – Пора не пора, я иду со двора! И я испугался, что он меня сейчас увидит, потому что я совершенно не спрятался, и я заметался по коридору туда-сюда, как подстреленный заяц. И тут в самое нужное время я увидел раскрытую дверь и вскочил в нее. Двадцать лет под кроватью - Драгунский В.Ю. Это была какая-то комната, и в ней на самом видном месте, у стены, стояла кровать, высокая и широкая, так что я моментально нырнул под эту кровать. Там был приятный полумрак и лежало довольно много вещей, и я стал сейчас же их рассматривать. Во-первых, под этой кроватью было очень много туфель разных фасонов, но все довольно старые, а еще стоял плоский деревянный чемодан, а на чемодане стояло алюминиевое корыто вверх тормашками, и я устроился очень удобно: голову на корыто, чемодан под поясницей – очень ловко и уютно. Я рассматривал разные тапочки и шлепанцы и все время думал, как это здорово я спрятался и сколько смеху будет, когда Костик меня тут найдет. Я отогнул немножко кончик одеяла, которое свешивалось со всех сторон до пола и закрывало от меня всю комнату: я хотел глядеть на дверь, чтобы видеть, как Костик войдет и будет меня искать. Но в это время в комнату вошел никакой не Костик, а вошла Ефросинья Петровна, симпатичная старушка, но немножко похожая на бабу-ягу. Двадцать лет под кроватью - Драгунский В.Ю. Она вошла, вытирая руки о полотенце. Я все время потихоньку наблюдал за нею, думал, что она обрадуется, когда увидит, как Костик вытащит меня из-под кровати. А я еще для смеху возьму какую-нибудь ее туфлю в зубы, она тогда наверняка упадет от смеха. Я был уверен, что вот еще секунда или две промелькнут, и Костик обязательно меня обнаружит. Поэтому я сам все время смеялся про себя, без звука. У меня было чудесное настроение. И я все время поглядывал на Ефросинью Петровну. А она тем временем очень спокойно подошла к двери и ни с того ни с сего плотно захлопнула ее. А потом, гляжу, повернула ключик – и готово! Заперлась. Ото всех заперлась! Вместе со мной и корытом. Заперлась на два оборота. В комнате сразу стало как-то тихо и зловеще. Но тут я подумал, что это она заперлась не надолго, а на минутку, и сейчас отопрет дверь, и все пойдет как по маслу, и опять будет смех и радость, и Костик будет просто счастлив, что вот он в таком трудном месте меня отыскал! Поэтому я хотя и оробел, но не до конца, и все продолжал посматривать на Ефросинью Петровну, что же она будет делать дальше. А она села на кровать, и надо мной запели и заскрежетали пружины, и я увидел ее ноги. Она одну за другой скинула с себя туфли и прямо в одних чулках подошла к двери, и у меня от радости заколотилось сердце. Я был уверен, что она сейчас отопрет замок, но не тут-то было. Можете себе редставить, она – чик! – и погасила свет. И я услышал, как опять завыли пружины над моей головой, а кругом кромешная тьма, и Ефросинья Петровна лежит в своей постели и не знает, что я тоже здесь, под кроватью. Я понял, что попал в скверную историю, что теперь я в заточении, в ловушке. Двадцать лет под кроватью - Драгунский В.Ю. Сколько я буду тут лежать? Счастье, если час или два! А если до утра? А как утром вылезать? А если я не приду домой, папа и мама обязательно сообщат в милицию. А милиция придет с собакой-ищейкой. По кличке Мухтар. А если в нашей милиции никаких собак нету? И если милиция меня не найдет? Двадцать лет под кроватью - Драгунский В.Ю. А если Ефросинья Петровна проспит до самого утра, а утром пойдет в свой любимый сквер сидеть целый день и снова запрет меня, уходя? Тогда как? Я, конечно, поем немножко из ее буфета, и, когда она придет, придется мне лезть под кровать, потому что я съел ее продукты и она отдаст меня под суд! И чтобы избежать позора, я буду жить под кроватью целую вечность? Ведь это самый настоящий кошмар! Конечно, тут есть тот плюс, что я всю школу просижу под кроватью, но как быть с аттестатом, вот в чем вопрос. С аттестатом зрелости! Я под кроватью за двадцать лет не то что созрею, я там вполне перезрею. Тут я не выдержал и со злости как трахнул кулаком по корыту, на котором лежала моя голова! Раздался ужасный грохот! И в этой страшной тишине при погашенном свете и в таком моем жутком положении мне этот стук показался раз в двадцать сильнее. Он просто оглушил меня. И у меня сердце замерло от испуга. А Ефросинья Петровна надо мной, видно, проснулась от этого грохота. Она, наверное, давно спала мирным сном, а тут пожалуйте – тах-тах из-под кровати! Она полежала маленько, отдышалась и вдруг спросила темноту слабым и испуганным голосом: – Ка-ра-ул?! Я хотел ей ответить: «Что вы, Ефросинья Петровна, какое там “караул”? Спите дальше, это я, Дениска!» Я все это хотел ей ответить, но вдруг вместо ответа как чихну во всю ивановскую, да еще с востиком: – Апчхи! Чхи! Чхи! Чхи!.. Там, наверное, пыль поднялась под кроватью ото всей этой возни, но Ефросинья Петровна после моего чиханья убедилась, что под кроватью происходит что-то неладное, здорово перепугалась и закричала уже не с вопросом, а совершенно утвердительно: – Караул! под кроватью И я, непонятно почему, вдруг опять чихнул изо всех сил, с каким-то даже подвыванием чихнул, вот так: – Апчхи-уу! Ефросинья Петровна как услышала этот вой, так закричала еще тише и слабей: – Грабят! И видно, сама подумала, что если грабят, так это ерунда, не страшно. А вот если… И тут она довольно громко завопила: – Режут! какое вранье!\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser1Id}}/comment/events/{{testEvent1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser1Id}}",
						"comment",
						"events",
						"{{testEvent1Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать пустой комментарий",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser1Id}}/comment/events/{{testEvent1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser1Id}}",
						"comment",
						"events",
						"{{testEvent1Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать комментарий с некорректным body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser1Id}}/comment/events/{{testEvent1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser1Id}}",
						"comment",
						"events",
						"{{testEvent1Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать комментарий к несуществующему событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Двадцать лет под кроватью\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser1Id}}/comment/events/{{$randomInt}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser1Id}}",
						"comment",
						"events",
						"{{$randomInt}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать комментарий от несуществующего пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Двадцать лет под кроватью\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{$randomInt}}/comment/events/{{testEvent1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{$randomInt}}",
						"comment",
						"events",
						"{{testEvent1Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактировать комментарий 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, user, event, text, stateComment,created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('user');",
							"pm.expect(target).to.have.property('event');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"Проверка корректности значения полей\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.user, ' поле\"user\" ').to.eql(pm.globals.get(\"testUser1Id\"));",
							"    pm.expect(jsonData.event, ' поле \"event\"').to.eql(pm.globals.get(\"testEvent1Id\"));",
							"    pm.expect(jsonData.state, ' поле \"state\"').to.eql('MODERATION');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Пора не пора, я иду со двора! И я испугался, что он меня сейчас увидит, потому что я совершенно не спрятался, и я заметался по коридору туда-сюда, как подстреленный заяц. И тут в самое нужное время я увидел раскрытую дверь и вскочил в нее.\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser1Id}}/comment/{{testComment1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser1Id}}",
						"comment",
						"{{testComment1Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактировать комментарий 1 комментарий более 6000 символов",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, user, event, text, stateComment,created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('user');",
							"pm.expect(target).to.have.property('event');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"Проверка корректности значения полей\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.user, ' поле\"user\" ').to.eql(pm.globals.get(\"testUser1Id\"));",
							"    pm.expect(jsonData.event, ' поле \"event\"').to.eql(pm.globals.get(\"testEvent1Id\"));",
							"    pm.expect(jsonData.state, ' поле \"state\"').to.eql('MODERATION');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Двадцать лет под кроватью - Драгунский В.Ю. И когда Мишка позвонил по телефону и позвал меня к себе, я тотчас же оделся и помчался к нему Двадцать лет под кроватью - Драгунский В.Ю. Там было светло и тепло и собралось много народу, пришла Аленка, за нею Костик и Андрюшка. Мы играли во все игры, и было весело и шумно. И под конец Аленка вдруг сказала: – А теперь в прятки! Давайте в прятки! И мы стали играть в прятки. Это было прекрасно, потому что мы с Мишкой все время подстраивали так, чтобы водить выпадало маленьким: Костику или Аленке, – а сами все время прятались и вообще водили малышей за нос. Но все наши игры проходили только в Мишкиной комнате, и это довольно скоро нам стало надоедать, потому что комната была маленькая, тесная и мы все время прятались за портьеру, или за шкаф, или за сундук, и в конце концов мы стали потихоньку выплескиваться из Мишкиной комнаты и заполнили своей игрой большущий длинный коридор квартиры. В коридоре было интереснее играть, потому что возле каждой двери стояли вешалки, а на них висели пальто и шубы. Это было гораздо лучше для нас, потому что, например, кто водит и ищет нас, тот, уж конечно, не сразу догадается, что я притаился за Марьсемениной шубой и сам влез в валенки как раз под шубой. игра в прятки И вот, когда водить выпало Костику, он отвернулся к стене и стал громко выкрикивать: – Раз! Два! Три! Четыре! Пять! Я иду искать! Тут все брызнули в разные стороны, кто куда, чтобы прятаться. А Костик немножко подождал и крикнул снова: – Раз! Два! Три! Четыре! Пять! Я иду искать! Опять!Это считалось как бы вторым звонком. Мишка сейчас же залез на подоконник, Аленка – за шкаф, а мы с Андрюшкой выскользнули в коридор. Тут Андрюшка, не долго думая, полез под шубу Марьи Семеновны, где я все время прятался, и оказалось, что я остался без места! И я хотел дать Андрюшке подзатыльник, чтобы он освободил мое место, но тут Костик крикнул третье предупреждение: – Пора не пора, я иду со двора! И я испугался, что он меня сейчас увидит, потому что я совершенно не спрятался, и я заметался по коридору туда-сюда, как подстреленный заяц. И тут в самое нужное время я увидел раскрытую дверь и вскочил в нее. Двадцать лет под кроватью - Драгунский В.Ю. Это была какая-то комната, и в ней на самом видном месте, у стены, стояла кровать, высокая и широкая, так что я моментально нырнул под эту кровать. Там был приятный полумрак и лежало довольно много вещей, и я стал сейчас же их рассматривать. Во-первых, под этой кроватью было очень много туфель разных фасонов, но все довольно старые, а еще стоял плоский деревянный чемодан, а на чемодане стояло алюминиевое корыто вверх тормашками, и я устроился очень удобно: голову на корыто, чемодан под поясницей – очень ловко и уютно. Я рассматривал разные тапочки и шлепанцы и все время думал, как это здорово я спрятался и сколько смеху будет, когда Костик меня тут найдет. Я отогнул немножко кончик одеяла, которое свешивалось со всех сторон до пола и закрывало от меня всю комнату: я хотел глядеть на дверь, чтобы видеть, как Костик войдет и будет меня искать. Но в это время в комнату вошел никакой не Костик, а вошла Ефросинья Петровна, симпатичная старушка, но немножко похожая на бабу-ягу. Двадцать лет под кроватью - Драгунский В.Ю. Она вошла, вытирая руки о полотенце. Я все время потихоньку наблюдал за нею, думал, что она обрадуется, когда увидит, как Костик вытащит меня из-под кровати. А я еще для смеху возьму какую-нибудь ее туфлю в зубы, она тогда наверняка упадет от смеха. Я был уверен, что вот еще секунда или две промелькнут, и Костик обязательно меня обнаружит. Поэтому я сам все время смеялся про себя, без звука. У меня было чудесное настроение. И я все время поглядывал на Ефросинью Петровну. А она тем временем очень спокойно подошла к двери и ни с того ни с сего плотно захлопнула ее. А потом, гляжу, повернула ключик – и готово! Заперлась. Ото всех заперлась! Вместе со мной и корытом. Заперлась на два оборота. В комнате сразу стало как-то тихо и зловеще. Но тут я подумал, что это она заперлась не надолго, а на минутку, и сейчас отопрет дверь, и все пойдет как по маслу, и опять будет смех и радость, и Костик будет просто счастлив, что вот он в таком трудном месте меня отыскал! Поэтому я хотя и оробел, но не до конца, и все продолжал посматривать на Ефросинью Петровну, что же она будет делать дальше. А она села на кровать, и надо мной запели и заскрежетали пружины, и я увидел ее ноги. Она одну за другой скинула с себя туфли и прямо в одних чулках подошла к двери, и у меня от радости заколотилось сердце. Я был уверен, что она сейчас отопрет замок, но не тут-то было. Можете себе редставить, она – чик! – и погасила свет. И я услышал, как опять завыли пружины над моей головой, а кругом кромешная тьма, и Ефросинья Петровна лежит в своей постели и не знает, что я тоже здесь, под кроватью. Я понял, что попал в скверную историю, что теперь я в заточении, в ловушке. Двадцать лет под кроватью - Драгунский В.Ю. Сколько я буду тут лежать? Счастье, если час или два! А если до утра? А как утром вылезать? А если я не приду домой, папа и мама обязательно сообщат в милицию. А милиция придет с собакой-ищейкой. По кличке Мухтар. А если в нашей милиции никаких собак нету? И если милиция меня не найдет? Двадцать лет под кроватью - Драгунский В.Ю. А если Ефросинья Петровна проспит до самого утра, а утром пойдет в свой любимый сквер сидеть целый день и снова запрет меня, уходя? Тогда как? Я, конечно, поем немножко из ее буфета, и, когда она придет, придется мне лезть под кровать, потому что я съел ее продукты и она отдаст меня под суд! И чтобы избежать позора, я буду жить под кроватью целую вечность? Ведь это самый настоящий кошмар! Конечно, тут есть тот плюс, что я всю школу просижу под кроватью, но как быть с аттестатом, вот в чем вопрос. С аттестатом зрелости! Я под кроватью за двадцать лет не то что созрею, я там вполне перезрею. Тут я не выдержал и со злости как трахнул кулаком по корыту, на котором лежала моя голова! Раздался ужасный грохот! И в этой страшной тишине при погашенном свете и в таком моем жутком положении мне этот стук показался раз в двадцать сильнее. Он просто оглушил меня. И у меня сердце замерло от испуга. А Ефросинья Петровна надо мной, видно, проснулась от этого грохота. Она, наверное, давно спала мирным сном, а тут пожалуйте – тах-тах из-под кровати! Она полежала маленько, отдышалась и вдруг спросила темноту слабым и испуганным голосом: – Ка-ра-ул?! Я хотел ей ответить: «Что вы, Ефросинья Петровна, какое там “караул”? Спите дальше, это я, Дениска!» Я все это хотел ей ответить, но вдруг вместо ответа как чихну во всю ивановскую, да еще с востиком: – Апчхи! Чхи! Чхи! Чхи!.. Там, наверное, пыль поднялась под кроватью ото всей этой возни, но Ефросинья Петровна после моего чиханья убедилась, что под кроватью происходит что-то неладное, здорово перепугалась и закричала уже не с вопросом, а совершенно утвердительно: – Караул! под кроватью И я, непонятно почему, вдруг опять чихнул изо всех сил, с каким-то даже подвыванием чихнул, вот так: – Апчхи-уу! Ефросинья Петровна как услышала этот вой, так закричала еще тише и слабей: – Грабят! И видно, сама подумала, что если грабят, так это ерунда, не страшно. А вот если… И тут она довольно громко завопила: – Режут! какое вранье!\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser1Id}}/comment/{{testComment1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser1Id}}",
						"comment",
						"{{testComment1Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"testUser2Id\", pm.response.json().id);",
							"",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('name');",
							"pm.expect(target).to.have.property('email');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактировать чужой комментарий",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 403\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([403]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Заперлась на два оборота.\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser2Id}}/comment/{{testComment1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser2Id}}",
						"comment",
						"{{testComment1Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удалить комментарий",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([204]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Заперлась на два оборота.\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser1Id}}/comment/{{testComment1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser1Id}}",
						"comment",
						"{{testComment1Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать комментарий 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"testComment3Id\", pm.response.json().id);",
							"",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, user, event, text, state,created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('user');",
							"pm.expect(target).to.have.property('event');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"Проверка корректности значения полей\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.user, ' поле\"user\" ').to.eql(pm.globals.get(\"testUser1Id\"));",
							"    pm.expect(jsonData.event, ' поле \"event\"').to.eql(pm.globals.get(\"testEvent1Id\"));",
							"    pm.expect(jsonData.state, ' поле \"state\"').to.eql('MODERATION');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Мы играли во все игры, и было весело и шумно. И под конец Аленка вдруг сказала: – А теперь в прятки! Давайте в прятки! И мы стали играть в прятки. Это было прекрасно, потому что мы с Мишкой все время подстраивали так, чтобы водить выпадало маленьким: Костику или Аленке, – а сами все время прятались и вообще водили малышей за нос.\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser1Id}}/comment/events/{{testEvent1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser1Id}}",
						"comment",
						"events",
						"{{testEvent1Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактировать статус комментариев 2,3 перевести в PUBLISHED",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"pm.test(\"Проверка полей комментариев из списка\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'количество комментариев').to.eql(2);",
							"",
							"    pm.expect(jsonData[0].id, 'result[0]: поле \"id\"').to.eql(pm.globals.get(\"testComment2Id\"));",
							"    pm.expect(jsonData[0].user, 'result[0]: поле \"user\"').to.eql(pm.globals.get(\"testUser1Id\"));",
							"    pm.expect(jsonData[0].event, 'result[0]: поле \"event\" ').to.eql(pm.globals.get(\"testEvent1Id\"));",
							"",
							"        pm.expect(jsonData[1].id, 'result[0]: поле \"id\"').to.eql(pm.globals.get(\"testComment3Id\"));",
							"    pm.expect(jsonData[1].user, 'result[0]: поле \"user\"').to.eql(pm.globals.get(\"testUser1Id\"));",
							"    pm.expect(jsonData[1].event, 'result[0]: поле \"event\" ').to.eql(pm.globals.get(\"testEvent1Id\"));",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"commentIds\": [\n      {{testComment2Id}},\n      {{testComment3Id}}\n],\n  \"state\": \"PUBLISHED\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить список комментариев  пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"pm.test(\"Проверка количества комментариев\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'количество комментариев').to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser1Id}}/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser1Id}}",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактировать статус комментариев 2,3 перевести в REMOVED",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"pm.test(\"Проверка полей комментариев из списка\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'количество комментариев').to.eql(2);",
							"",
							"    pm.expect(jsonData[0].id, 'result[0]: поле \"id\"').to.eql(pm.globals.get(\"testComment2Id\"));",
							"    pm.expect(jsonData[0].user, 'result[0]: поле \"user\"').to.eql(pm.globals.get(\"testUser1Id\"));",
							"    pm.expect(jsonData[0].event, 'result[0]: поле \"event\" ').to.eql(pm.globals.get(\"testEvent1Id\"));",
							"",
							"        pm.expect(jsonData[1].id, 'result[0]: поле \"id\"').to.eql(pm.globals.get(\"testComment3Id\"));",
							"    pm.expect(jsonData[1].user, 'result[0]: поле \"user\"').to.eql(pm.globals.get(\"testUser1Id\"));",
							"    pm.expect(jsonData[1].event, 'result[0]: поле \"event\" ').to.eql(pm.globals.get(\"testEvent1Id\"));",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"commentIds\": [\n      {{testComment2Id}},\n      {{testComment3Id}}\n],\n  \"state\": \"REMOVED\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать событие 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"testEvent2Id\", pm.response.json().id);",
							"",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('title');",
							"pm.expect(target).to.have.property('annotation');",
							"pm.expect(target).to.have.property('category');",
							"pm.expect(target).to.have.property('paid');",
							"pm.expect(target).to.have.property('eventDate');",
							"pm.expect(target).to.have.property('initiator');",
							"pm.expect(target).to.have.property('description');",
							"pm.expect(target).to.have.property('participantLimit');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('createdOn');",
							"pm.expect(target).to.have.property('location');",
							"pm.expect(target).to.have.property('requestModeration');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"annotation\": \"Quibusdam in quos nemo ut. Ducimus voluptate deleniti aliquam aperiam suscipit. Dolore earum alias omnis et cupiditate necessitatibus enim dolore. Amet pariatur quae nihil repellendus magni.\",\n    \"category\": {{testCategory1Id}},\n    \"description\": \"test\",\n    \"eventDate\": \"2029-04-07 02:59:52\",\n    \"location\": {\n        \"lat\": 57.7979,\n        \"lon\": 100.1282\n    },\n    \"paid\": \"false\",\n    \"participantLimit\": \"534\",\n    \"requestModeration\": \"false\",\n    \"title\": \"Reiciendis sint qui inventore ea ipsa.\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser2Id}}/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser2Id}}",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать комментарий 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"testComment4Id\", pm.response.json().id);",
							"",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, user, event, text, state,created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('user');",
							"pm.expect(target).to.have.property('event');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"Проверка корректности значения полей\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.user, ' поле\"user\" ').to.eql(pm.globals.get(\"testUser2Id\"));",
							"    pm.expect(jsonData.event, ' поле \"event\"').to.eql(pm.globals.get(\"testEvent2Id\"));",
							"    pm.expect(jsonData.state, ' поле \"state\"').to.eql('MODERATION');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"а сами все время прятались и вообще водили малышей за нос.\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser2Id}}/comment/events/{{testEvent2Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser2Id}}",
						"comment",
						"events",
						"{{testEvent2Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать комментарий 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"testComment5Id\", pm.response.json().id);",
							"",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, user, event, text, state,created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('user');",
							"pm.expect(target).to.have.property('event');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"Проверка корректности значения полей\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.user, ' поле\"user\" ').to.eql(pm.globals.get(\"testUser2Id\"));",
							"    pm.expect(jsonData.event, ' поле \"event\"').to.eql(pm.globals.get(\"testEvent2Id\"));",
							"    pm.expect(jsonData.state, ' поле \"state\"').to.eql('MODERATION');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"И мы стали играть в прятки.\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{testUser2Id}}/comment/events/{{testEvent2Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{testUser2Id}}",
						"comment",
						"events",
						"{{testEvent2Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить список комментариев  к событию 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"pm.test(\"Проверка количества комментариев\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'количество комментариев').to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/comment/events/{{testEvent2Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comment",
						"events",
						"{{testEvent2Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактировать статус комментариев 4,5 перевести в PUBLISHED",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"pm.test(\"Проверка полей комментариев из списка\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'количество комментариев').to.eql(2);",
							"",
							"    pm.expect(jsonData[0].id, 'result[0]: поле \"id\"').to.eql(pm.globals.get(\"testComment4Id\"));",
							"    pm.expect(jsonData[0].user, 'result[0]: поле \"user\"').to.eql(pm.globals.get(\"testUser2Id\"));",
							"    pm.expect(jsonData[0].event, 'result[0]: поле \"event\" ').to.eql(pm.globals.get(\"testEvent2Id\"));",
							"",
							"        pm.expect(jsonData[1].id, 'result[0]: поле \"id\"').to.eql(pm.globals.get(\"testComment5Id\"));",
							"    pm.expect(jsonData[1].user, 'result[0]: поле \"user\"').to.eql(pm.globals.get(\"testUser2Id\"));",
							"    pm.expect(jsonData[1].event, 'result[0]: поле \"event\" ').to.eql(pm.globals.get(\"testEvent2Id\"));",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"commentIds\": [\n      {{testComment4Id}},\n      {{testComment5Id}}\n],\n  \"state\": \"PUBLISHED\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить список комментариев  к событию 2 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"pm.test(\"Проверка количества комментариев\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'количество комментариев').to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/comment/events/{{testEvent2Id}}?from=0&size=100",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comment",
						"events",
						"{{testEvent2Id}}"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить комментарий по id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, user, event, text, state,created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('user');",
							"pm.expect(target).to.have.property('event');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('created');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/comment/{{testComment5Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comment",
						"{{testComment5Id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}